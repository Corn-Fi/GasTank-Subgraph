// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class GasTank extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GasTank entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GasTank must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GasTank", id.toString(), this);
    }
  }

  static load(id: string): GasTank | null {
    return changetype<GasTank | null>(store.get("GasTank", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get balance(): BigDecimal {
    let value = this.get("balance");
    return value!.toBigDecimal();
  }

  set balance(value: BigDecimal) {
    this.set("balance", Value.fromBigDecimal(value));
  }

  get paused(): boolean {
    let value = this.get("paused");
    return value!.toBoolean();
  }

  set paused(value: boolean) {
    this.set("paused", Value.fromBoolean(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get feesCollected(): BigDecimal {
    let value = this.get("feesCollected");
    return value!.toBigDecimal();
  }

  set feesCollected(value: BigDecimal) {
    this.set("feesCollected", Value.fromBigDecimal(value));
  }

  get payers(): Array<string> | null {
    let value = this.get("payers");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set payers(value: Array<string> | null) {
    if (!value) {
      this.unset("payers");
    } else {
      this.set("payers", Value.fromStringArray(<Array<string>>value));
    }
  }

  get payees(): Array<string> | null {
    let value = this.get("payees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set payees(value: Array<string> | null) {
    if (!value) {
      this.unset("payees");
    } else {
      this.set("payees", Value.fromStringArray(<Array<string>>value));
    }
  }

  get fee(): BigDecimal {
    let value = this.get("fee");
    return value!.toBigDecimal();
  }

  set fee(value: BigDecimal) {
    this.set("fee", Value.fromBigDecimal(value));
  }
}

export class Payer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Payer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Payer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Payer", id.toString(), this);
    }
  }

  static load(id: string): Payer | null {
    return changetype<Payer | null>(store.get("Payer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amountDeposited(): BigDecimal {
    let value = this.get("amountDeposited");
    return value!.toBigDecimal();
  }

  set amountDeposited(value: BigDecimal) {
    this.set("amountDeposited", Value.fromBigDecimal(value));
  }

  get totalAmountSpent(): BigDecimal {
    let value = this.get("totalAmountSpent");
    return value!.toBigDecimal();
  }

  set totalAmountSpent(value: BigDecimal) {
    this.set("totalAmountSpent", Value.fromBigDecimal(value));
  }

  get gasTank(): string {
    let value = this.get("gasTank");
    return value!.toString();
  }

  set gasTank(value: string) {
    this.set("gasTank", Value.fromString(value));
  }

  get payees(): Array<string> | null {
    let value = this.get("payees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set payees(value: Array<string> | null) {
    if (!value) {
      this.unset("payees");
    } else {
      this.set("payees", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class PayerPayee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PayerPayee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PayerPayee must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PayerPayee", id.toString(), this);
    }
  }

  static load(id: string): PayerPayee | null {
    return changetype<PayerPayee | null>(store.get("PayerPayee", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get payer(): string {
    let value = this.get("payer");
    return value!.toString();
  }

  set payer(value: string) {
    this.set("payer", Value.fromString(value));
  }

  get payee(): string {
    let value = this.get("payee");
    return value!.toString();
  }

  set payee(value: string) {
    this.set("payee", Value.fromString(value));
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value!.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }
}

export class Payee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Payee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Payee must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Payee", id.toString(), this);
    }
  }

  static load(id: string): Payee | null {
    return changetype<Payee | null>(store.get("Payee", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value!.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }

  get gasTank(): string {
    let value = this.get("gasTank");
    return value!.toString();
  }

  set gasTank(value: string) {
    this.set("gasTank", Value.fromString(value));
  }
}
